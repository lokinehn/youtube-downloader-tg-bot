import asyncio
import os
import re
import logging
import sys
import subprocess

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.token import TokenValidationError
from dotenv import load_dotenv

load_dotenv()

api_token = os.environ['TOKEN']
bot_username = '@'
channel_username = "@zimmermans_channel"
channel_link = f"https://t.me/{channel_username.lstrip('@')}"

user_downloading = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

dp = Dispatcher()

async def is_valid_url(url: str) -> bool:
    youtube_regex = r"(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\&v=)?([^&=%\?]{11})"
    return re.match(youtube_regex, url) is not None

async def is_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def download_and_send_video(url: str, chat_id: int, user_id: int, bot: Bot):
    try:
        filename = f"{user_id}.mp4"
        process = await asyncio.create_subprocess_exec(
            "./yt-dlp",
            "-f", "bv*[vcodec^=avc1]+ba[acodec^=mp4a]/best[ext=mp4]/best",
            "--merge-output-format", "mp4",
            "-o", filename,
            url,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        if process.returncode != 0:
            raise Exception(stderr.decode())

        try:
            video = FSInputFile(filename)
            await bot.send_video(
                chat_id,
                video,
                caption=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ {bot_username}"
            )
        except Exception as e:
            await bot.send_message(
                chat_id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ò–õ–ò –µ–≥–æ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50–ú–ë."
            )
        finally:
            if os.path.exists(filename):
                os.remove(filename)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await bot.send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
        )

@dp.message(CommandStart())
async def cmd_start(message: Message, bot: Bot) -> None:
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube (Shorts).")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∏–∑ YouTube (Shorts).\n\n"
        "‚ö†Ô∏è –ë–æ—Ç –º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ <b>—Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 50–ú–ë</b> (—Ç–∞–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ API Telegram).\n\n"
        "üìå –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫—É—Å–æ–∫ –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ YouTube ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é \"–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø\" "
        "–Ω–∞ YouTube, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∏–ø –±–æ—Ç—É.\n\n"
        "üîí –ß–∞—Å—Ç—å Reels –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤–∏–¥–µ–æ.\n\n"
        "üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @lokinehn"
    )
    await message.answer(help_text)

@dp.message(F.text)
async def process_url(message: Message, bot: Bot):
    user_id = message.from_user.id
    url = message.text
    chat_id = message.chat.id

    if await is_subscribed(bot, user_id):
        if not await is_valid_url(url):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            return

        if chat_id in user_downloading:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        user_downloading[chat_id] = True
        await message.answer("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...")

        await download_and_send_video(url, chat_id, user_id, bot)

        del user_downloading[chat_id]
    else:
        await message.answer(f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel_link}")

async def main() -> None:
    bot = Bot(token=api_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except TokenValidationError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
